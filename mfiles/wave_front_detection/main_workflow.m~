clear all
close all
% the steps involved are,
% 1) define camera, grid, network parameters
% 2) load a video, read frames, rectify and interp to regular FRF grid
% 3) re-scale the image intensity (gray-scale) to enhance contrast between foam/water
% 4) apply neural network to get an array of front probabilities (continuous 0=non-front to 1=front)
% 5) extract the coordinates of the ridges/maxima in (4). This is the sketchy/subjective/kludgy. 
%
% 1) function reads video, grid, and camera parameters;
addpath(genpath('../'));
[info, icp, beta0] = define_camera_parameters();% located in waveIMG/mfiles/video_processing
%
% 2) read video frames, etc.
% where are videos? what are the filenames (this would eventually require a loop)
videoDir = ['../../data/20130929/1100/'];
videoFile= ['20130929_112106_B314_00408CEBCECB_11.avi'];
% load video
videoPath = [videoDir,filesep,videoFile];
% loads the current video, but does not rectify, yet.
vid   = VideoReader(videoPath);
vidHz = vid.FrameRate;
vidDr = vid.Duration;
% determine frame indeces from the playback speed and sample frequency.
invRate           = round(vidHz/info.freq);
videoFrameIndices = 1:invRate:vid.NumFrames;
numberVideoFrames = length(videoFrameIndices);% (another loop here, frameNum from 1:nVF-3)
%
% prepare image (U,V) coordinates for rectification
[U, V] = meshgrid(0:icp.NU-1, 0:icp.NV-1);
% generate grid (X,Y) coords for transformation
X = info.X_min:info.X_res:info.X_max;
Y = info.Y_min:info.Y_res:info.Y_max;
[xx,yy] = meshgrid(X,Y);
% this is where you'd apply tidal correction
z_tide    = zeros(size(xx));
% use CIRN toolbox to map (x,y) to (U,V) for later interpolation
% if you're not correcting for tides/waterlevel variation, this can be done once
[Uint,Vint]  = getUVfromXYZ(xx,yy, z_tide, icp, beta0);
% we use a 3-image time-stack... I trained it on 0.5 Hz.
frameNum = 1;
frames   = frameNum + [0 1 2];
for ii   = 1:3
    % load frame    
    IMGraw  = double(rgb2gray(read(vid,frames(ii))));
    % interpolate to grid points
    IMG(:,:,ii) = interp2(U,V,IMGraw,Uint,Vint, 'linear', nan);
end
%
% make a figure
figure
RI = imref2d(size(IMG));
RI.XWorldLimits = [info.X_min info.X_max];
RI.YWorldLimits = [info.Y_min info.Y_max];
imshow(uint8(IMG),RI)
% imagesc(X, Y, IMG)
%               
% colormap('bone')
xlabel(' $x$ [m]', 'interpreter','latex')
ylabel(' $y$ [m]', 'interpreter','latex') 
axis(gca,'equal')
set(gca,'tickdir','out','ticklabelinterpreter','latex','fontsize',15,'ydir','normal')
title(gca,sprintf("Psuedo-Image: # %d",frameNum));
%
% 3) now use Carinni et al to try and separate water/foam peaks (if any)
[foam_th,foam_pk,ob,opdf] = water_foam_threshold(IMG,1);
%
% now re-scale IMG using the water/foam threshold
IMG0 = IMG;
IMG  = 1./(1+exp(-3*pi/2*(IMG0-foam_th)/(255-foam_th)));
IMG = uint8(IMG);
%
figure
RI = imref2d(size(IMG));
RI.XWorldLimits = [info.X_min info.X_max];
RI.YWorldLimits = [info.Y_min info.Y_max];
imshow(IMG,RI)
% imagesc(X, Y, IMG)
%               
% colormap('bone')
xlabel(' $x$ [m]', 'interpreter','latex')
ylabel(' $y$ [m]', 'interpreter','latex') 
axis(gca,'equal')
set(gca,'tickdir','out','ticklabelinterpreter','latex','fontsize',15,'ydir','normal')
title(gca,sprintf("Psuedo-Image: # %d",frameNum));
